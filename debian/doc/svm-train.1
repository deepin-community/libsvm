.\" Process this file with
.\" groff -man -Tascii svm-train.1
.\"
.TH svm-train 1 "MAY 2006" Linux "User Manuals"
.SH NAME
svm-train \- train one or more SVM instance(s) on a given data set to produce a model file
.SH SYNOPSIS
.B svm-train [-s
.I svm_type
.B ] [ -t
.I kernel_type
.B ] [ -d
.I degree
.B ] [ -g
.I gamma
.B ] [ -r
.I coef0
.B ] [ -c
.I cost
.B ] [ -n
.I nu
.B ] [ -p
.I epsilon
.B ] [ -m
.I cachesize
.B ] [ -e
.I epsilon
.B ] [ -h
.I shrinking
.B ] [ -b
.I probability_estimates ]
.B ] [ -wi
.I weight
.B ] [ -v
.I n
.B ] [ -q ]

.I training_set_file [ model_file ]
.SH DESCRIPTION
.B svm-train
trains a Support Vector Machine to learn the data indicated in the
.I training_set_file
 and produce a
.I model_file
 to save the results of the learning optimization.  This model can be
used later with
.BR svm_predict (1)
or other LIBSVM enabled software.
.SH OPTIONS
.IP "-s svm_type"
svm_type defaults to 0 and can be any value between 0 and 4 as follows:
.TP
.B 0
--
.I C-SVC
.TP
.B 1
--
.I nu-SVC
.TP
.B 2
--
.I one-class SVM
.TP
.B 3
--
.I epsilon-SVR
.TP
.B 4
--
.I nu-SVR

.IP "-t kernel_type"
kernel_type defaults to 2 (Radial Basis Function (RBF) kernel) and can be any value between 0 and 4 as follows:
.TP
.B 0
--
.I linear: u.v
.TP
.B 1
--
.I polynomial: (gamma*u.v + coef0)^degree
.TP
.B 2
--
.I radial basis function: exp(-gamma*|u-v|^2)
.TP
.B 3
--
.I sigmoid: tanh(gamma*u.v + coef0)
.TP
.B 4
--
.I precomputed kernel (kernel values in training_set_file)
--
.IP "-d degree"
Sets the
.I degree
of the kernel function, defaulting to 3
.IP "-g gamma"
Adjusts the
.I gamma
in the kernel function (default 1/k)
.IP "-r coef0"
Sets the
.I coef0
(constant offset) in the kernel function (default 0)
.IP "-c cost"
Sets the parameter C (
.I cost
) of C-SVC, epsilon-SVR, and nu-SVR (default 1)
.IP "-n nu"
Sets the parameter 
.I nu
of nu-SVC, one-class SVM, and nu-SVR (default 0.5)
.IP "-p epsilon"
Set the
.I epsilon
in the loss function of epsilon-SVR (default 0.1)
.IP "-m cachesize"
Set the cache memory size to
.I cachesize
in MB (default 100)
.IP "-e epsilon"
Set the tolerance of termination criterion to
.I epsilon
(default 0.001)
.IP "-h shrinking"
Whether to use the
.I shrinking
 heuristics, 0 or 1 (default 1)
.IP "-b probability-estimates"
.I probability_estimates
is a binary value indicating whether to calculate probability estimates when training the SVC or SVR model.  Values are 0 or 1 and defaults to 0 for speed.
.IP "-wi weight"
Set the parameter C (cost) of class
.I i
to weight*C, for C-SVC (default 1)
.IP "-v n"
Set
.I n
for
.I n
\-fold cross validation mode
.IP "-q"
quiet mode; suppress messages to stdout.
.SH FILES
.I training_set_file
must be prepared in the following simple sparse training vector format:

.TP
<label> <index1>:<value1> <index2>:<value2> . . .
.TP
 .
.TP
 .
.TP
 .

.TP
There is one sample per line.  Each sample consists of a target value (label or regression target) followed by a sparse representation of the input vector.  All unmentioned coordinates are assumed to be 0.  For classification, <label> is an integer indicating the class label (multi-class is supported). For regression, <label> is the target value which can be any real number. For one-class SVM, it's not used so can be any number.  Except using precomputed kernels (explained in another section), <index>:<value> gives a feature (attribute) value.  <index> is an integer starting from 1 and <value> is a real number. Indices must be in an ASCENDING order.

.SH ENVIRONMENT
No environment variables.

.SH DIAGNOSTICS
None documented; see Vapnik et al.
.SH BUGS
Please report bugs to the Debian BTS.
.SH AUTHOR
Chih-Chung Chang, Chih-Jen Lin <cjlin@csie.ntu.edu.tw>, Chen-Tse Tsai <ctse.tsai@gmail.com> (packaging)
.SH "SEE ALSO"
.BR svm-predict (1),
.BR svm-scale (1)
